<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- 基于代理类的AOP实现 -->
    <!-- 1 目标类 -->
    <!--<bean id="userDao" class="com.hoshino.spring.aop.aspect.dao.impl.UserDaoImpl"/>
    &lt;!&ndash; 2 切面类 &ndash;&gt;
    <bean id="myAspect" class="com.hoshino.spring.aop.aspect.asp.MyAspect"/>
    &lt;!&ndash; 3 使用Spring代理工厂定义一个名称为userDaoProxy的代理对象 &ndash;&gt;
    <bean id="userDaoProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
        &lt;!&ndash; 3.1 指定代理实现的接口&ndash;&gt;
        <property name="proxyInterfaces" value="com.hoshino.spring.aop.aspect.dao.UserDao"/>
        &lt;!&ndash; 3.2 指定目标对象 &ndash;&gt;
        <property name="target" ref="userDao"/>
        &lt;!&ndash; 3.3 指定切面,织入环绕通知 &ndash;&gt;
        <property name="interceptorNames" value="myAspect"/>
        &lt;!&ndash; 3.4 指定代理方式，true：使用cglib，false(默认)：使用jdk动态代理 &ndash;&gt;
        <property name="proxyTargetClass" value="true"/>
    </bean>-->

    <!-- 基于 XML 的声明式 AspectJ -->
    <!-- 配置目标对象：增强的对象 -->
    <bean id="userDao" class="com.hoshino.spring.aop.aspectJ_xml.dao.impl.UserDaoImpl"/>
    <!-- 将通知类交给Spring管理 -->
    <bean id="myAspect" class="com.hoshino.spring.aop.aspectJ_xml.asp.MyAspect"/>
    <aop:config>
        <aop:pointcut id="pointcut1" expression="execution(* com.hoshino.spring.aop.aspectJ_xml.dao.impl.UserDaoImpl.save())"/>
        <aop:pointcut id="pointcut2" expression="execution(* com.hoshino.spring.aop.aspectJ_xml.dao.impl.UserDaoImpl.delete())"/>
        <aop:pointcut id="pointcut3" expression="execution(* com.hoshino.spring.aop.aspectJ_xml.dao.impl.UserDaoImpl.update())"/>
        <aop:pointcut id="pointcut4" expression="execution(* com.hoshino.spring.aop.aspectJ_xml.dao.impl.UserDaoImpl.find())"/>
        <aop:aspect ref="myAspect">
            <aop:before method="myBefore" pointcut-ref="pointcut1"/>
            <aop:after-returning method="myAfterReturning" pointcut-ref="pointcut2"/>
            <aop:around method="myAround" pointcut-ref="pointcut3"/>
            <aop:after-throwing method="myAfterThrowing" pointcut-ref="pointcut4" throwing="ex"/>
            <aop:after method="myAfter" pointcut-ref="pointcut4"/>
        </aop:aspect>
    </aop:config>

    <!-- 基于注解的声明式 AspectJ -->
    <context:component-scan base-package="com.hoshino.spring.aop.aspectJ_anno"/>
    <!-- 启动基于注解的声明式 AspectJ 支持一 -->
    <aop:aspectj-autoproxy/>
</beans>